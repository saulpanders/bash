#!/bin/bash
# sysinfo_page2 - a different way to make an html script
# a "here script"

#### CONSTANTS

TITLE="System information for $HOSTNAME"
RIGHT_NOW=$(date +" %x %r %Z")
TIMESTAMP="Updated on $RIGHT_NOW by $USER"

#### FUNCTIONS

system_info()
{
	# Find any release files in etc/
	if /etc/*release 1>/dev/null 2>&1; then
        echo "<h2>System release info</h2>"
        echo "<pre>"
        for i in /etc/*release; do

            # Since we can't be sure of the
            # length of the file, only
            # display the first line.

            head -n 1 $i
        done
        uname -orp
        echo "</pre>"
    fi
}

show_uptime()
{
	# Temp func. stub
	echo "<h2>System uptime</h2>"
	echo "<pre>"
	uptime
	echo "</pre>"
}

drive_space()
{
	# Temp func. stub
	echo "<h2>Filesystem space"
	echo "<pre>"
	df
	echo "</pre>"	
}

home_space()
{
	echo "<h2>Home directory space by user</h2>"
	echo "<pre>"
	format="%8s%10s%10s   %-s\n"
	printf "$format" "Dirs" "Files" "Blocks" "Directory"
	printf "$format" "----" "-----" "------" "---------"
	if [ $(id -u) = "0" ]; then
		dir_list="/home/*"
    	else
        	dir_list=$HOME
    	fi

    	for home_dir in $dir_list; do
        	total_dirs=$(find $home_dir -type d | wc -l)
        	total_files=$(find $home_dir -type f | wc -l)
        	total_blocks=$(du -s $home_dir)
        	printf "$format" $total_dirs $total_files $total_blocks
   	 done
	 echo "</pre>"

	#end of home_space
}

write_page()
{
cat <<- _EOF_
<html>
	<head>
		<title>
		$HOSTNAME
		</title>
	</head>

	<body>
		<h1>$TITLE</h1>
		<p>$TIMESTAMP</p>
		$(system_info)
		$(show_uptime)
		$(drive_space)
		$(home_space)
	</body>
</html>
_EOF_

}

usage()
{
	echo "usage: sysinfo_page [[[-f file] [-i]] | [h]]"
}


#### MAIN
interactive=
filename=./sysinfo_page.html

while [ "$1" != "" ]; do
	case $1 in
		-f | --file )		shift
					filename=$1
					;;
		-i | --interactive )	interactive=1
					;;
		-h | --help )		usage
					exit
					;;
		* )			usage
					exit 1
					;;
	esac
	shift
done

# Test code to verify command line processing
if [ "$interactive" = "1" ]; then
	echo "interactive is on"
else
	echo "interactive is off"
fi
echo "output file = $filename"

#interactive mode code
if [ "$interactive" = "1" ]; then
	
	response =

	echo -n "enter name of output file [$filename] > "
	read response
	if [ -n "$response" ]; then
		filename=$response
	fi

	if [ -f $filename ]; then
		echo -n "Output file exists, overwrite? (y/n) >"
		read response
		if [ "$response" != "y" ]; then
			echo "exiting program..."
			exit 1
		fi
	fi
fi

#Write page (comment out till testing done)
write_page > $filename
